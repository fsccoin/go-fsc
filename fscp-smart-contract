pragma solidity ^0.4.11;
           library SafeMath {
                     function mul(uint256 a, uint256 b) internal constant returns (uint256) {
              
                     uint256 c = a * b;
        assert(a ==  0  || c / a == b);
        return c;
    }

    function div(uint256 a, uint256 b) internal constant returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function sub(uint256 a, uint256 b) internal constant returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    function add(uint256 a, uint256 b) internal constant returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

contract Ownable {
    address public owner;


    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
    function kill() { 
        if ( owner == msg.sender){
            selfdestruct ( owner )
        }
    }

}

contract FSC20Basic {
    );
    function balanceOf(address who) public view returns (uint256);
    function transfer(address to, uint256 value) public returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
}

contract BasicToken is FSC20Basic {
    using SafeMath for uint256;

    mapping(address => uint256) balances;
    function transfer(address _to, uint256 _value) public returns (bool) {
       balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value);
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

}
contract FSC20 is FSC20Basic {
    function allowance(address owner, address spender) public view returns (uint256);
    function transferFrom(address from, address to, uint256 value) public returns (bool);
    function approve(address spender, uint256 value) public returns (bool);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract StandardToken is FSC20, BasicToken {

    mapping (address => mapping (address => uint256)) internal allowed; 
                     
    event  Burn (address  indexed  burner , uint256 value) ;
                     
    event  Mint (address  indexed  to , uint256 amount) ;
    event  MintFinished () ;     
    
    bool  public  mintingFinished = false;                 
    
    modifier  canMint () {
        require(! mintingFinished) ;                
       _;
   }
   
   function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {
         totalSupply = totalSupply .add( _amount);
         balances [ _to] = balances[ _to].add( _amount);
         emit mint(_to, _amount);
         emit Transfer(address(0), _to, _amount);
         return true;
    }
    
    function burn(uint256 _value ) public {
        require(_value <= balances[msg.sender]);
                     
        address burner = msg.sender;
        balances[burner] = balances[burner].sub(_value);
        totalSupply = totalSupply.sub(_value);
        Burn(burner,  _value);
        Transfer(burner, address(0), _value);
    }
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
             require(_to!= address(0)) ;
             require(_value <= balances[_from]) ;
             require(_value <= allowed[_from][msg.sender]) ;
             
             balances[_from] = balances[_from].sub(_value);
             balances[_to] = balances[_to].add(_value);
             allowed[_from][msg.sender]  = allowed[_from][msg.sender].sub(_value); 
             Transfer(_from, _to, _value); 
             return true;
     } 
               
    function approve(address _spender, uint256 _value) public returns (bool) {
        require((_value)== 0) | | (allowed[msg.sender][_spender] == 0)); 
        
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256) {
        return allowed[_owner][_spender];
    }
}

contract FiveStarCoinPro is StandardToken 
{
       string public constant name= "Five Star Coin Pro";
       string public constant symbol = "FSCP";
       uint256 constant public decimals = 8;
       uint256 public constant INITIAL_SUPPLY = 1000000 * 10**8;
       function FiveStarCoinPro() 
       {
               totalSupply_ = INITIAL_SUPPLY;
               balances[msg.sender] = INITIAL_SUPPLY;
    }
}
